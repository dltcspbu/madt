
Примеры
=======

Этот раздел документации содержит конкретные примеры, 
которые не подходят для введения, но, тем не менее, будут полезны.

Docker compose
--------------

Если вы используете docker-compose для развертывания своего приложения, 
вы можете запустить все контейнеры на одном узле, используя образ madt/docker_compose. 
Этот образ не построен по умолчанию, поэтому вам  необходимо создать его вручную: ::

    cd ~/images/docker_compose
    docker build -t madt/docker_compose .

Узлам, использующим этот образ, потребуется несколько дополнительных 
параметров для правильной работы.
Прежде всего, узлы должны быть запущены в привилегированном режиме. 
Кроме того, если docker-compose потребует извлечения образа из Docker Hub, 
подключение к Интернету должно быть включено с параметром enable_internet.
    
В этом примере мы будем использовать модель из примера с динамической маршрутизацией, 
чтобы продемонстрировать использование docker-compose в MADT. 
Вместо сервера Nginx мы будем использовать прокси Nginx и простой веб-сервер whoami, 
запущенный вместе с docker-compose. Вот наш docker-compose.yml:

.. literalinclude:: ../tutorials/docker_compose/docker-compose.yml
    :language: yaml

Необходимо изменить скрипт определения модели, чтобы использовать docker-compose 
на сервере и установить дополнительное правило разрешения хоста на клиентах:

.. literalinclude:: ../tutorials/docker_compose/lab.py

Поскольку прокси-сервер Nginx направляет запросы с использованием значения поля Host, 
мы используем параметр extra_host из
`Docker Python API <https://docker-py.readthedocs.io/en/stable/containers.html#docker.models.containers.ContainerCollection.run>`_, 
чтобы установить имя хоста для сервера без правильного DNS.

После создания файлов для новой модели и ее запуска вы можете использовать интерфейс 
мониторинга для просмотра сообщений о состоянии от узлов. 
Docker-compose потребуется некоторое время для запуска приложения, 
поэтому клиентские узлы не смогут установить соединение с сервером.
Это приведет к тому, что узлы будут менять цвет на фиолетовый в интерфейсе мониторинга. 
Когда compose завершит подготовку, сервер начнет отправлять ответы клиентам, 
и цвет узлов станет зеленым.

Kademlia
--------
Рассмотрим следующий пример:

Многочисленные автономные датчики распределены по большой площади. 
У них нет доступа в Интернет, однако они подключены к изолированной локальной сети. 
Разработчики хотят использовать DHT Kademlia для организации распределенного хранения 
показаний датчиков. Теоретически, это должно облегчить сбор данных и 
обеспечить сохранение некоторых показаний, даже если датчик поврежден.

Мы будем использовать madt, чтобы найти минимальные требования для локальной сети, 
которые гарантируют, что каждое показание датчика, снимаемое каждые N минут, 
будет сохранено в DHT до следующего считывания.

Чтобы моделировать датчики через MADT, мы должны реализовать программу, 
которая генерирует данные и записывает их в DHT каждые N секунд. 
Кроме того, она отправляет текущее состояние в подсистему мониторинга MADT через madt_client.

.. literalinclude:: ../tutorials/kademlia/kademlia_tester.py

MADT использует docker контейнеры для эффективного моделирования полностью изолированной среды 
для каждого компьютера в моделируемой сети. 
По этой причине мы должны создать образ Docker со всеми зависимостями для нашего псевдодатчика 
(например, madt_client и kademlia).

.. literalinclude:: ../tutorials/kademlia/Dockerfile
    :language: dockerfile

Теперь, когда наше приложение готово к тестированию, мы можем перейти к описанию 
структуры виртуальной сети, поверх которой будет запущено приложение. 
Для этого MADT предоставляет Python API, доступный в модуле :py:mod:`madt_lib`. 
Поскольку все датчики подключены к одной локальной сети, структура виртуальной 
сети будет максимально простой. Следующий скрипт Python создает сетевую 
модель и сохраняет ее в папке /app/labs/tutorial:

.. literalinclude:: ../tutorials/kademlia/lab.py

После запуска скрипта модель готова к тестированию.

Чтобы автоматизировать этот процесс, мы будем использовать другой скрипт на python, который запускает экземпляры модели.
Каждый последующий экземпляр будет иметь большую задержку в сети, пока Kademlia не сможет сохранить показания во времени:

.. literalinclude:: ../tutorials/kademlia/run_test.py

После того, как задержка в сети сделает Kademlia DHT слишком медленным, 
чтобы сохранять значения во времени, скрипт выдаст предупреждение и завершится.
